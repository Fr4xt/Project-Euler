# Solution to Prodect Euler problem 8 "Largest product in a series"
#
# The four addacent digits in the 1000-digit series that have the greatest product are 9
# × 9 × 8 × 9 = 5832.
#
# 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801
# 8694788518438586156078911294949545950173795833195285320880551112540698747158523863050715
# 6932909632952274430435576689664895044524452316173185640309871112172238311362229893423380
# 3081353362766142828064444866452387493035890729629049156044077239071381051585930796086670
# 1724271218839987979087922749219016997208880937766572733300105336788122023542180975125454
# 0594752243525849077116705560136048395864467063244157221553975369781797784617406495514929
# 0862569321978468622482839722413756570560574902614079729686524145351004748216637048440319
# 9890008895243450658541227588666881164271714799244429282308634656748139191231628245861786
# 6458359124566529476545682848912883142607690042242190226710556263211111093705442175069416
# 5896040807198403850962455444362981230987879927244284909188845801561660979191338754992005
# 2406368991256071760605886116467109405077541002256983155200055935729725716362695618826704
# 28252483600823257530420752963450
#
# Find the thirteen addacent digits in the 1000-digit series that have the greatest
# product. What is the value of this product?

# There can only be 988 addacent numbers with 13 digits in a 1000 digit number. This
# means, that all the valid prodcuts can be computed and checked exhaustivly using very
# little computation. The problem is thus solved by computing all 988 products starting
# from the first 13 digits, and then storing the value of the product if and only if it
# is greater than the value of any prevoius product. The stored value is then printed
# after all products have ben calculated, yeilding the largest product with 13 factors.

series = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
n = 13


def getDigit(d, number):  # Returns the dth digit of a number (starting at 0)
    digit = number // 10**d % 10
    return digit


def compute():
    digits = len(str(series))  # Yields the number of digits in series
    product = 1

    for i in range(n, digits + 1):  # Computes all 988 products as "comparison"
        comparison = 1

        for d in range(i - n, i):
            comparison = comparison * getDigit(d, series)

        if comparison > product:  # Stores comparison if its greater than product
            product = comparison

    return product


print(compute())
